using LLMAPI.Services.Interfaces;
using LLMAPI.Service.Interfaces;
using Microsoft.AspNetCore.Http;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Google.Protobuf;
using Microsoft.Extensions.Configuration;

namespace LLMAPI.Services.OpenRouter
{
    /// <summary>
    /// Service to interact with the OpenRouter API for text generation and image recognition.
    /// Implements interfaces for both text and image services.
    /// </summary>
    public class OpenRouterService : ITextGenerationService, IImageRecognitionService, IImageFileService
    {
        private readonly IHttpClientFactory _httpClientFactory;
        private readonly IConfiguration _configuration;

        /// <summary>
        /// Initializes a new instance of the <see cref="OpenRouterService"/> class.
        /// </summary>
        /// <param name="httpClientFactory">Factory for creating HTTP clients.</param>
        /// <param name="configuration">Application configuration provider.</param>
        public OpenRouterService(IHttpClientFactory httpClientFactory, IConfiguration configuration)
        {
            _httpClientFactory = httpClientFactory;
            _configuration = configuration;
        }

        /// <summary>
        /// Generates text using a specified model and prompt via the OpenRouter API.
        /// </summary>
        /// <param name="model">The LLM model to use for text generation (e.g., "openai/gpt-4o-mini").</param>
        /// <param name="prompt">The text prompt to send to the LLM.</param>
        /// <returns>The generated text response from the LLM or an error message.</returns>
        public async Task<string> GenerateText(string model, string prompt)
        {
            var requestData = new
            {
                model,
                messages = new List<object>
                {
                    new { role = "user", content = prompt }
                }
            };

            return await SendRequest(requestData);
        }

        /// <summary>
        /// Analyzes an image from a given URL using a specified model and prompt, potentially including CNN context, via the OpenRouter API.
        /// </summary>
        /// <param name="model">The LLM model to use for image analysis (e.g., "openai/gpt-4o").</param>
        /// <param name="imageUrl">The URL of the image to analyze.</param>
        /// <param name="textPrompt">The base text prompt to guide the image analysis (e.g., "Write an alt text for this image.").</param>
        /// <param name="predictedAircraft">Optional predicted aircraft type from CNN.</param>  // <-- Added Parameter Doc
        /// <param name="probability">Optional probability of the CNN prediction.</param>      // <-- Added Parameter Doc
        /// <param name="temperature">This setting influences the variety in the model’s responses.</param>
        /// <returns>The image description generated by the LLM or an error message.</returns>
        public async Task<string> AnalyzeImage(
            string model,
            string imageUrl,
            string textPrompt,
            string? predictedAircraft,
            double? probability,
            double temperature)
        {
            // Gets the potentially augmented prompt - Now uses the actual parameters
            string compositePrompt = BuildCompositePrompt(textPrompt, predictedAircraft, probability);

            var requestData = new
            {
                model,
                temperature,
                max_tokens = 500,
                messages = new List<object>
                {
                    new {
                        role = "user",
                        content = new List<object>
                        {
                            // Uses the combined prompt here
                            new { type = "text", text = compositePrompt },
                            // Image URL alongside the text
                            new { type = "image_url", image_url = new { url = imageUrl } }
                        }
                    }
                }
            };
            return await SendRequest(requestData);
        }


        /// <summary>
        /// Analyzes an image from byte data using a specified model and prompt, potentially including CNN context, via the OpenRouter API.
        /// </summary>
        /// <param name="model">The LLM model to use for image analysis.</param>
        /// <param name="imageBytes">The image data as a ByteString.</param>
        /// <param name="textPrompt">The base text prompt to guide the image analysis.</param>
        /// <param name="predictedAircraft">Optional predicted aircraft type from CNN.</param>
        /// <param name="probability">Optional probability of the CNN prediction.</param>
        /// <param name="temperature">This setting influences the variety in the model’s responses.</param>
        /// <returns>The image description generated by the LLM or an error message.</returns>
        public async Task<string> AnalyzeImage(
            string model,
            ByteString imageBytes,
            string textPrompt,
            string? predictedAircraft,
            double? probability,
            double temperature)
        {
            // Construct the final prompt, prepending CNN info if available
            string compositePrompt = BuildCompositePrompt(textPrompt, predictedAircraft, probability);

            string base64Image = imageBytes.ToBase64();
            // Ensure the correct MIME type if it might not always be PNG
            string dataUri = $"data:image/png;base64,{base64Image}"; // Assuming PNG, adjust if needed

            var requestData = new
            {
                model,
                temperature,
                max_tokens = 500, // Consider making this configurable
                messages = new List<object>
                {
                    new {
                        role = "user",
                        content = new List<object>
                        {
                             // Use the composite prompt which includes CNN context
                            new { type = "text", text = compositePrompt },
                            // IMPORTANT: OpenRouter documentation usually expects image content via 'image_url'
                            // even for base64 data URIs. Check their latest API spec.
                            // If 'image_bytes' is a valid type, use that, otherwise use image_url with data URI.
                            // Using image_url with data URI as it's more standard for vision models.
                            new { type = "image_url", image_url = new { url = dataUri } }
                            // If 'image_bytes' is supported:
                            // new { type = "image_bytes", image_bytes = base64Image } // Send only base64 part
                        }
                    }
                }
            };

            return await SendRequest(requestData);
        }

        /// <summary>
        /// Helper method to build the composite prompt including optional CNN context.
        /// </summary>
        private string BuildCompositePrompt(string basePrompt, string? predictedAircraft, double? probability)
        {
            string cnnContext = ""; // Starts empty
            string NoYapping = "Do not mention this context, simply take the context into consideration when writing the alt text and include the airplane model name. Your confidence overrules the CNN prediction.";
            // Check if BOTH predictedAircraft and probability are present
            if (!string.IsNullOrWhiteSpace(predictedAircraft) && probability.HasValue)
            {
                // Use full context with probability
                cnnContext = $"Context from CNN: Predicted '{predictedAircraft}' with probability {probability.Value:P1}. " + NoYapping;
            }
            // Check if ONLY predictedAircraft is present (probability is null)
            else if (!string.IsNullOrWhiteSpace(predictedAircraft))
            {
                // Use partial context without probability
                cnnContext = $"Context from CNN: Predicted '{predictedAircraft}'. " + NoYapping;
            }
            // If neither condition is met, cnnContext remains ""

            // Prepend context (if any) to the base prompt
            return cnnContext + basePrompt;
        }


        // Optional: Helper for System Role context (if needed later)
        // private string BuildSystemContext(string? predictedAircraft, double? probability)
        // {
        //     if (!string.IsNullOrWhiteSpace(predictedAircraft))
        //     {
        //         string probInfo = probability.HasValue ? $" with probability {probability.Value:P1}" : "";
        //         return $"You are assisting with image analysis. A preceding CNN model predicted the primary subject as '{predictedAircraft}'{probInfo}. Use this context if relevant to the user's request.";
        //     }
        //     return "You are assisting with image analysis."; // Default system message
        // }


        /// <summary>
        /// Sends a request to the OpenRouter API.
        /// </summary>
        /// <param name="requestData">The request data object to be serialized as JSON.</param>
        /// <returns>The content of the successful response from the API, or an error message.</returns>
        private async Task<string> SendRequest(object requestData)
        {
            var openRouterAPIKey = _configuration["OpenRouter:APIKey"];
            var openRouterAPIUrl = _configuration["OpenRouter:APIUrl"]; // Should be "https://openrouter.ai/api/v1/chat/completions"

            if (string.IsNullOrEmpty(openRouterAPIKey) || string.IsNullOrEmpty(openRouterAPIUrl))
            {
                Console.WriteLine("Error: OpenRouter API Key or URL is not configured.");
                return "Error: Service configuration missing.";
            }

            var client = _httpClientFactory.CreateClient("OpenRouterClient"); // Use a named client if configured

            client.DefaultRequestHeaders.Clear(); // Clear headers for safety
            client.DefaultRequestHeaders.Add("Authorization", $"Bearer {openRouterAPIKey}");
            // Referer and Title might be optional depending on OpenRouter requirements for backend calls
            client.DefaultRequestHeaders.Add("HTTP-Referer", _configuration["OpenRouter:Referer"] ?? "http://localhost"); // Make configurable
            client.DefaultRequestHeaders.Add("X-Title", _configuration["OpenRouter:Title"] ?? "LLMAPI"); // Make configurable

            var jsonContent = JsonConvert.SerializeObject(requestData, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });
            Console.WriteLine($">>> Sending JSON Request Body to {openRouterAPIUrl}: {jsonContent}");
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            try
            {
                var response = await client.PostAsync(openRouterAPIUrl, content);
                var responseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"<<< Status code: {response.StatusCode}");
                //Console.WriteLine("Response headers: " + response.Headers); // Can be verbose
                Console.WriteLine($"<<< Raw API response: {responseContent}");

                if (response.IsSuccessStatusCode)
                {
                    dynamic? jsonResponse = JsonConvert.DeserializeObject(responseContent);
                    // Check specifically for OpenRouter's error structure if known, or a general 'error' field
                    if (jsonResponse?.error != null)
                    {
                        string errorMessage = $"OpenRouter API Error: {jsonResponse.error?.message ?? jsonResponse.error}";
                        Console.WriteLine(errorMessage);
                        return errorMessage;
                    }

                    // Extract the content safely
                    var messageContent = jsonResponse?.choices?[0]?.message?.content;
                    if (messageContent != null)
                    {
                        return messageContent.ToString();
                    }

                    Console.WriteLine("Warning: Successful response but no valid content found in choices[0].message.content.");
                    return "Model returned a successful response, but no content was found.";
                }
                else
                {
                    // Attempt to parse error details from OpenRouter's response if available
                    string errorDetails = responseContent;
                    try
                    {
                        dynamic? errorJson = JsonConvert.DeserializeObject(responseContent);
                        if (errorJson?.error?.message != null)
                        {
                            errorDetails = errorJson.error.message;
                        }
                    }
                    catch { /* Ignore if parsing fails, use raw content */ }

                    Console.WriteLine($"Error: {response.StatusCode}. Details: {errorDetails}");
                    return $"Error: {response.StatusCode}. Details: {errorDetails}";
                }
            }
            catch (HttpRequestException httpEx)
            {
                Console.WriteLine($"HTTP Request Error sending to OpenRouter: {httpEx.Message}");
                return $"Error communicating with LLM service: {httpEx.Message}";
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during OpenRouter request: {ex}");
                return $"An unexpected error occurred: {ex.Message}";
            }
        }


        // --- IImageFileService Methods ---

        /// <summary>
        /// Converts an <see cref="IFormFile"/> image to a <see cref="ByteString"/>.
        /// </summary>
        /// <param name="imageFile">The image file uploaded via HTTP.</param>
        /// <returns>The image content as a ByteString, or null if input is null.</returns>
        public async Task<ByteString?> ConvertImageToByteString(IFormFile? imageFile) // Allow null input
        {
            if (imageFile == null || imageFile.Length == 0) return null;

            using var memoryStream = new MemoryStream();
            await imageFile.CopyToAsync(memoryStream);
            return ByteString.CopyFrom(memoryStream.ToArray());
        }

        /// <summary>
        /// Reads an image from a URL and converts it to a <see cref="ByteString"/>.
        /// </summary>
        /// <param name="url">The URL of the image.</param>
        /// <returns>The image content as a ByteString, or null if reading fails.</returns>
        public async Task<ByteString?> ReadImageFileAsync(string? url) // Allow null input
        {
            if (string.IsNullOrWhiteSpace(url) || !Uri.TryCreate(url, UriKind.Absolute, out _))
            {
                Console.WriteLine($"Invalid or empty URL provided: {url}");
                return null;
            }
            try
            {
                // Use a dedicated client or one from the factory
                using HttpClient client = _httpClientFactory.CreateClient();
                using var response = await client.GetAsync(url);
                response.EnsureSuccessStatusCode(); // Throw if download failed
                byte[] imageBytes = await response.Content.ReadAsByteArrayAsync();
                return ByteString.CopyFrom(imageBytes);
            }
            catch (HttpRequestException httpEx)
            {
                Console.WriteLine($"Failed to download image from URL '{url}'. Error: {httpEx.Message}");
                return null;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred while reading image from URL '{url}'. Error: {ex.Message}");
                return null;
            }
        }
    }
}
